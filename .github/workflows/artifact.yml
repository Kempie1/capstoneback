name: PartsShop Backend / Build Image & Push

on:
  push:
    branches:
      - prod


jobs:
  build:
    name: Build / Artifact
    runs-on: ubuntu-latest
    env:
      BUILD_NUMBER: ${{ github.run_number }}

    strategy:
      matrix:
        node-version: [20]

    steps:
      - uses: actions/checkout@v4

      - name: Run tests with ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@preview
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_DEFAULT_OUTPUT: json
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
      
      - name: Create Docker Image
        run: |
          rm -rf node_modules .dist
          yarn cache clean
          version=$(npx -c 'echo $npm_package_version')
          docker build -t partsshop .
      
      - name: Tag and Push
        run: |
          version=$(npx -c 'echo $npm_package_version')
          docker tag partsshop:latest:$version ${{ secrets.ECR_REPOSITORY_URI }}/partsshop:$version-${{ env.BUILD_NUMBER }}
          docker push ${{ secrets.ECR_REPOSITORY_URI }}/partsshop:$version-${{ env.BUILD_NUMBER }}
          